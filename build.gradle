import java.nio.file.Files
import java.nio.file.StandardCopyOption

plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.1-SNAPSHOT" apply false
}

architectury {
    minecraft = rootProject.minecraft_version
}

subprojects {
    apply plugin: "dev.architectury.loom"

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        // The following line declares the mojmap mappings, you may use other mappings as well
        mappings loom.officialMojangMappings()
        // The following line declares the yarn mappings you may select this one as well.
        // mappings "net.fabricmc:yarn:@YARN_MAPPINGS@:v2"
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    archivesBaseName = rootProject.archives_base_name
    version = rootProject.mod_version
    group = rootProject.maven_group

    repositories {
        // Add repositories to retrieve artifacts from in here.
        // You should only use this when depending on other mods because
        // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
        // See https://docs.gradle.org/current/userguide/declaring_repositories.html
        // for more information about repositories.
    }

    dependencies {
        // External libraries
        implementation "org.apache.commons:commons-collections4:4.4"
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = "UTF-8"
        options.release.set(17)
    }

    java {
        withSourcesJar()
    }
}

tasks.register("copyJar") {
    mustRunAfter(":fabric:build")
    mustRunAfter(":forge:build")
    doLast {
        def root = rootDir.toPath()
        def publish = root.resolve("build/publish")
        Files.createDirectories(publish)
        java.nio.file.Path fabricJar
        def match = "whitelistd-" + version + ".jar"
        def fileBaseName = "Whitelistd-" + version + "-"
        for (def i : Files.list(root.resolve("fabric/build/libs"))) {
            if (match == i.toFile().name) {
                Files.copy(i, publish.resolve(fileBaseName + "fabric.jar"), StandardCopyOption.REPLACE_EXISTING)
                break
            }
        }
        for (def i : Files.list(root.resolve("forge/build/libs"))) {
            if (match == i.toFile().name) {
                Files.copy(i, publish.resolve(fileBaseName + "forge.jar"), StandardCopyOption.REPLACE_EXISTING)
                break
            }
        }
    }
}

tasks.named("build") {
    finalizedBy("copyJar")
}
